<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coach.model.Lesson">
  
   <resultMap id="BaseLessonResult" type="com.coach.model.Lesson">
  	   <id column="id" jdbcType="BIGINT" property="id" />
       <result column="name" jdbcType="VARCHAR" property="name" />
       <result column="startTime" jdbcType="TIMESTAMP" property="startTime" />
       <result column="endTime" jdbcType="TIMESTAMP" property="endTime" />
       <result column="hours" jdbcType="FLOAT" property="hours" />
       <result column="type" jdbcType="INTEGER" property="type" />
       <result column="groundId" jdbcType="INTEGER" property="groundId" />
       <result column="groundName" jdbcType="VARCHAR" property="groundName" />
  </resultMap>
  
  <resultMap id="LessonDetailResult" type="com.coach.model.Lesson">
  	   <id column="id" jdbcType="BIGINT" property="id" />
       <result column="name" jdbcType="VARCHAR" property="name" />
       <result column="startTime" jdbcType="TIMESTAMP" property="startTime" />
       <result column="endTime" jdbcType="TIMESTAMP" property="endTime" />
       <result column="hours" jdbcType="FLOAT" property="hours" />
       <result column="type" jdbcType="INTEGER" property="type" />
       <result column="memberNum" jdbcType="INTEGER" property="memberNum" />
       <result column="alertSwitch" jdbcType="INTEGER" property="alertSwitch" />
       <result column="description" jdbcType="VARCHAR" property="description" />
       <result column="groundId" jdbcType="INTEGER" property="groundId" />
       <result column="groundName" jdbcType="VARCHAR" property="groundName" />
       <result column="orgName" jdbcType="VARCHAR" property="orgName" />
       <result column="longitude" jdbcType="DOUBLE" property="longitude" />
       <result column="latitude" jdbcType="DOUBLE" property="latitude" />
  </resultMap>
  
  <select id="getLessonInRange" parameterType="Map" resultMap="BaseLessonResult">
    select * from (
    	select s.id, s.name, s.startTime, s.endTime, s.hours, s.groundId, s.groundName,
		CASE WHEN s.checkFlag = #{checkFlag} THEN 0
		WHEN c.type = 0 THEN 1
		WHEN c.type = 1 THEN 2
		END type
		from course c INNER JOIN coach_course cc on c.id  = cc.courseId and c.status = 0 and cc.status = 1
		INNER JOIN lesson s on c.id = s.courseId and s.status = 0 
		where cc.coachId = #{coachId} and s.startTime &gt;= #{startDate} and s.endTime &lt; #{endDate}
	union ALL
		select s.id, s.name, s.startTime, s.endTime, s.hours, s.groundId, s.groundName, 3 type
		from lesson s where s.coachId  = #{coachId} and s.courseId is null and s.status = 0 and s.startTime &gt;= #{startDate} and s.endTime &lt; #{endDate}
	)aa order by aa.startTime asc
  </select>
  
  <select id="getLessonDetail" parameterType="Map" resultMap="LessonDetailResult">
    	select s.id, s.name, s.startTime, s.endTime, s.hours, s.description, s.alertSwitch, s.type, s.longitude, s.latitude, 
    	(select count(distinct lm.memberId) from lesson_member lm where lm.lessonId = #{lessonId} and status != 2)memberNum,
    	s.groundId, s.groundName, s.address, g.name orgName
		from course c INNER JOIN coach_course cc on c.id  = cc.courseId
		INNER JOIN lesson s on c.id = s.courseId
		left outer join organization g on c.organizationId = g.id
		where cc.coachId = #{coachId} and s.id = #{lessonId}
  </select>
  
  <select id="getLifeDetail" parameterType="Map" resultMap="LessonDetailResult">
    	select s.id, s.name, s.startTime, s.endTime, s.description, s.alertSwitch, s.type, s.address, s.longitude, s.latitude
		from lesson s
		where s.coachId = #{coachId} and s.id = #{lessonId}
  </select>
  
  <select id="getDetailRecentInRange" parameterType="Map" resultMap="LessonDetailResult">
   select * from (
    	select s.id, s.name, s.startTime, s.endTime, s.hours, s.description, s.alertSwitch, s.groundId, s.groundName, s.address,
    	CASE WHEN c.type = 0 THEN 1
		WHEN c.type = 1 THEN 2
		END type
		from course c INNER JOIN coach_course cc on c.id  = cc.courseId and c.status = 0 and cc.status = 1
		INNER JOIN lesson s on c.id = s.courseId and s.status = 0
		where cc.coachId = #{coachId} and s.startTime &gt;= #{startDate} and s.endTime &lt; #{endDate}
		
		UNION ALL
		
		select s.id, s.name, s.startTime, s.endTime, s.hours, s.description, s.alertSwitch, s.groundId, s.groundName, s.address,
		3 type
		from lesson s where s.coachId  = #{coachId} and s.courseId is null and s.status = 0 and s.startTime &gt;= #{startDate} and s.endTime &lt; #{endDate}
	)aa order by aa.startTime asc
  </select>
  
  <select id="getNewsFlag" parameterType="Integer" resultType="Map">
	select c.avatarUrl,
	case when c.type = 0 then 0 
	else (select count(cc.id) from coach_course cc where cc.status = 0 and cc.id = #{coachId})end courseNewsFlag,
	case when c.type = 0 then 0
	else (select count(*) from coach_news_history hh, member_news n where n.createTime >= hh.lastViewTime and  
	n.coachId = #{coachId} and hh.coachId = #{coachId})end memberNewsFlag
	from coach c
	where c.id = #{coachId}
  </select>
  
  <select id="getTotalLessonNum" parameterType="Map" resultType="Map">
    select DATE_FORMAT(s.startTime,'%Y-%m') monthStr, c.type, sum(s.hours)num
	FROM
	coach ch INNER JOIN coach_course cc on ch.id = cc.coachId
	INNER JOIN course c on cc.courseId = c.id and c.status = #{courseActiveStatus}
	INNER JOIN lesson s on s.courseId = c.id and s.status = #{lessonActiveStatus}
	where s.checkFlag = #{lessonCheckedFlag} and s.startTime >= #{startDate} and ch.id = #{coachId}
	GROUP BY c.type, monthStr
  </select>
    
  <select id="getPercent" parameterType="Map" resultType="Double">
    select 
		(select count(aa.id) from (select ch.id, ifnull(sum(s.hours), 0) num FROM
                           coach ch inner join tuser tt on ch.tuserId = tt.id and tt.status != 1
                           left JOIN coach_course cc on ch.id = cc.coachId and cc.status = #{courseAcceptedStatus}
                           left JOIN course c on cc.courseId = c.id and c.status = #{courseActiveStatus}
                           left JOIN lesson s on s.courseId = c.id and s.status = #{lessonActiveStatus} 
                           and s.checkFlag = #{lessonCheckedFlag} and s.startTime >= #{startDate}
                           GROUP BY ch.id)aa 
 	      where aa.num &lt; #{percent}) 
 	      / 
 	      (select count(cch.id) from coach cch inner join tuser t on cch.tuserId = t.id where t.status != 1)  
  </select>
  
  <select id="getCheckLesson" parameterType="Map" resultMap="BaseLessonResult">
    select s.id, s.name, DATE_FORMAT(s.startTime,'%Y-%m-%d %T') date, s.hours, s.startTime, c.type 
	from coach_course cc INNER JOIN course c on cc.courseId = c.id and cc.status = #{acceptedStatus} and c.status = #{courseActiveStatus}
	INNER JOIN lesson s on s.courseId = c.id and s.status = #{lessonActiveStatus}
	where cc.coachId = #{coachId} and s.startTime >= #{startDate} and s.checkFlag = #{lessonCheckedFlag}
	order by s.startTime desc  
	limit #{pageNumber}, #{pageSize}
  </select>
  
  <select id="getLessonFrom" parameterType="Map" resultMap="BaseLessonResult">
    select s.id, s.name, s.hours, s.startTime, s.endTime 
	from coach_course cc INNER JOIN course c on cc.courseId = c.id and cc.status = #{acceptedStatus} and c.status = #{courseActiveStatus}
	INNER JOIN lesson s on s.courseId = c.id and s.status = #{lessonActiveStatus}
	where cc.coachId = #{coachId} and s.startTime >= #{startDate} 
	union all
	select s.id, s.name, s.hours, s.startTime, s.endTime 
	from lesson s
	where s.coachId = #{coachId} and s.startTime >= #{startDate} and s.status = #{lessonActiveStatus}
  </select>
  
  <select id="getAssignedHour" parameterType="Map" resultType="Float">
    select count(s.hours) from lesson s
	where s.courseId = #{courseId} and s.status = #{lessonActiveStatus}
  </select>
  
  <insert id="insertLesson" useGeneratedKeys="true" keyProperty="id" parameterType="com.coach.model.Lesson">
	INSERT INTO lesson(courseId, startTime, endTime, createTime, type, name, address, description, organizationId, hours, alertSwitch, longitude, latitude, groundId, groundName, coachId) 
	VALUE (#{courseId}, #{startTime}, #{endTime}, now(), #{type}, #{name}, #{address}, #{description}, #{organizationId}, #{hours}, #{alertSwitch}, #{longitude}, #{latitude}, #{groundId}, #{groundName}, #{coachId})
  </insert>
  
  <update id="changeCheckFlag" parameterType="Long">
	update lesson set checkFlag = 1 where id = #{lessonId}
  </update>
  
  <update id="deleteLesson" parameterType="Map">
	update lesson set status = #{status} where courseId = #{courseId}
  </update>
  
  <update id="updateLessonStatus" parameterType="Map">
	update lesson set status = #{status} where id = #{lessonId}
  </update>
  
  <update id="updateLesson" parameterType="Map">
	update lesson set updateTime = now()
	 <if test="startTime != null">, startTime = #{startTime}</if>
	 <if test="endTime != null">, endTime = #{endTime}</if>
	 <if test="name != null">, name = #{name}</if>
	 <if test="address != null">, address = #{address}</if>
	 <if test="longitude != null">, longitude = #{longitude}</if>
	 <if test="latitude != null">, latitude = #{latitude}</if>
	 <if test="description != null">, description = #{description}</if>
	 <if test="alertSwitch != null">, alertSwitch = #{alertSwitch}</if>
	where id = #{lessonId}
  </update>
  
</mapper>